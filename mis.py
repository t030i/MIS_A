# -*- coding: utf-8 -*-
"""MIS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U4575IGRn_u2jxaHzURSn7xYf-ZF65ms
"""

# Install required library
# !pip install scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import zipfile
import requests
from io import BytesIO

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score

# Download and extract dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip"
response = requests.get(url)

with zipfile.ZipFile(BytesIO(response.content)) as z:
    with z.open("SMSSpamCollection") as f:
        df = pd.read_csv(f, sep="\t", header=None, names=["label", "message"])

df.head()

# Add a new feature
df['message_length'] = df['message'].apply(len)

# Label encode the target column
df['label_encoded'] = LabelEncoder().fit_transform(df['label'])

# Heatmap
sns.heatmap(df[['label_encoded', 'message_length']].corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

# Boxplot
sns.boxplot(x='label', y='message_length', data=df)
plt.title("Message Length by Label")
plt.show()

# Scatter plot
sns.scatterplot(x=range(len(df)), y='message_length', hue='label', data=df)
plt.title("Message Length Distribution")
plt.show()

tfidf = TfidfVectorizer(stop_words='english', max_features=1000)
X_tfidf = tfidf.fit_transform(df['message'])
y = df['label_encoded']

X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)
dt_preds = dt_model.predict(X_test)

print("Decision Tree Accuracy:", accuracy_score(y_test, dt_preds))
print(confusion_matrix(y_test, dt_preds))
print(classification_report(y_test, dt_preds))

# Scale features
scaler = StandardScaler(with_mean=False)
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train_scaled, y_train)
knn_preds = knn_model.predict(X_test_scaled)

print("KNN Accuracy:", accuracy_score(y_test, knn_preds))
print(confusion_matrix(y_test, knn_preds))
print(classification_report(y_test, knn_preds))

results = pd.DataFrame({
    "Model": ["Decision Tree", "KNN"],
    "Accuracy": [accuracy_score(y_test, dt_preds), accuracy_score(y_test, knn_preds)],
    "F1 Score": [f1_score(y_test, dt_preds), f1_score(y_test, knn_preds)]
})
results